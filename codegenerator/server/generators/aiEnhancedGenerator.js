const aiService = require('../services/aiService');

/**
 * AI-Enhanced Code Generator
 * Provides intelligent code improvements, suggestions, and analysis
 */
class AIEnhancedGenerator {
  
  /**
   * Enhance generated code with AI-powered improvements
   */
  async enhanceGeneratedCode(generatedCode, language, apiInfo = {}) {
    const enhancedCode = {};
    const aiInsights = {
      suggestions: [],
      optimizations: [],
      documentation: [],
      security: [],
      performance: []
    };

    try {
      // Process each generated file
      for (const [filePath, code] of Object.entries(generatedCode)) {
        console.log(`🤖 AI-enhancing: ${filePath}`);
        
        // Get AI suggestions for this file
        const suggestions = await aiService.generateCodeSuggestions(code, language, {
          filePath,
          apiInfo
        });
        
        // Get error detection and fixes
        const errorAnalysis = await aiService.detectErrorsAndSuggestFixes(code, language);
        
        // Get optimization recommendations
        const optimizations = await aiService.generateOptimizationRecommendations(code, language, {
          filePath,
          apiInfo
        });

        // Enhance the code with AI suggestions
        const enhancedCodeContent = this.applyAISuggestions(code, suggestions, errorAnalysis, optimizations);
        
        enhancedCode[filePath] = enhancedCodeContent;
        
        // Collect insights
        aiInsights.suggestions.push({
          file: filePath,
          suggestions: suggestions.suggestions,
          confidence: suggestions.confidence
        });
        
        aiInsights.optimizations.push({
          file: filePath,
          recommendations: optimizations.recommendations,
          confidence: optimizations.confidence
        });
        
        if (errorAnalysis.errors && errorAnalysis.errors.length > 0) {
          aiInsights.security.push({
            file: filePath,
            errors: errorAnalysis.errors,
            fixes: errorAnalysis.fixes
          });
        }
      }

      // Generate enhanced documentation
      const mainCodeFile = this.findMainCodeFile(generatedCode, language);
      if (mainCodeFile) {
        const documentation = await aiService.generateDocumentation(
          enhancedCode[mainCodeFile], 
          language, 
          apiInfo
        );
        
        aiInsights.documentation.push({
          file: mainCodeFile,
          documentation: documentation.documentation,
          confidence: documentation.confidence
        });
      }

      // Add AI insights to the enhanced code
      enhancedCode['ai-insights.json'] = JSON.stringify(aiInsights, null, 2);
      enhancedCode['docs/AI_ANALYSIS.md'] = this.generateAIAnalysisReport(aiInsights, apiInfo);

      return {
        enhancedCode,
        aiInsights,
        summary: this.generateAISummary(aiInsights)
      };

    } catch (error) {
      console.error('AI enhancement error:', error);
      return {
        enhancedCode: generatedCode,
        aiInsights: { error: 'AI enhancement failed, using original code' },
        summary: 'AI enhancement unavailable'
      };
    }
  }

  /**
   * Apply AI suggestions to the code
   */
  applyAISuggestions(code, suggestions, errorAnalysis, optimizations) {
    let enhancedCode = code;
    
    // Add AI-generated comments at the top
    const aiHeader = this.generateAIHeader(suggestions, errorAnalysis, optimizations);
    enhancedCode = aiHeader + '\n\n' + enhancedCode;
    
    // Add inline suggestions as comments
    enhancedCode = this.addInlineSuggestions(enhancedCode, suggestions);
    
    return enhancedCode;
  }

  /**
   * Generate AI header with insights
   */
  generateAIHeader(suggestions, errorAnalysis, optimizations) {
    return `/**
 * 🤖 AI-Enhanced Code
 * 
 * This code has been enhanced with AI-powered suggestions and improvements.
 * 
 * 📊 AI Analysis Summary:
 * - Code Quality Score: ${this.calculateQualityScore(suggestions, errorAnalysis, optimizations)}/10
 * - Suggestions Applied: ${suggestions.confidence > 0.7 ? 'Yes' : 'No'}
 * - Error Detection: ${errorAnalysis.errors && errorAnalysis.errors.length > 0 ? 'Issues Found' : 'Clean'}
 * - Optimization Level: ${this.getOptimizationLevel(optimizations.confidence)}
 * 
 * 💡 Key Improvements:
 * ${this.extractKeyImprovements(suggestions, optimizations)}
 * 
 * ⚠️  Important Notes:
 * - Review all AI suggestions before production use
 * - Test thoroughly after applying changes
 * - Consider security implications of any modifications
 * 
 * Generated by AI-Enhanced API Code Generator
 */`;
  }

  /**
   * Add inline suggestions as comments
   */
  addInlineSuggestions(code, suggestions) {
    if (!suggestions.suggestions) return code;
    
    // Extract key suggestions and add them as comments
    const keySuggestions = this.extractKeySuggestions(suggestions.suggestions);
    
    let enhancedCode = code;
    keySuggestions.forEach((suggestion, index) => {
      enhancedCode += `\n\n// 💡 AI Suggestion ${index + 1}: ${suggestion}`;
    });
    
    return enhancedCode;
  }

  /**
   * Find the main code file for documentation generation
   */
  findMainCodeFile(generatedCode, language) {
    const mainFiles = {
      'node.js': 'src/ApiClient.js',
      'java': 'src/main/java/ApiClient.java',
      'php': 'src/ApiClient.php',
      'go': 'main.go'
    };
    
    return mainFiles[language] || Object.keys(generatedCode)[0];
  }

  /**
   * Generate AI analysis report
   */
  generateAIAnalysisReport(aiInsights, apiInfo) {
    return `# 🤖 AI Analysis Report

## Overview
This report contains AI-powered analysis and recommendations for your generated API integration code.

## 📊 Analysis Summary
- **Total Files Analyzed:** ${Object.keys(aiInsights.suggestions).length}
- **Average Confidence Score:** ${this.calculateAverageConfidence(aiInsights)}/10
- **Security Issues Found:** ${aiInsights.security.length}
- **Optimization Opportunities:** ${aiInsights.optimizations.length}

## 🔍 Detailed Analysis

### Code Quality Suggestions
${aiInsights.suggestions.map(s => `
#### ${s.file}
- **Confidence:** ${s.confidence}/10
- **Suggestions:** ${s.suggestions.substring(0, 200)}...
`).join('')}

### Performance Optimizations
${aiInsights.optimizations.map(o => `
#### ${o.file}
- **Confidence:** ${o.confidence}/10
- **Recommendations:** ${o.recommendations.substring(0, 200)}...
`).join('')}

### Security Analysis
${aiInsights.security.map(s => `
#### ${s.file}
- **Issues Found:** ${s.errors.length}
- **Fixes:** ${s.fixes.substring(0, 200)}...
`).join('')}

## 🚀 Recommendations
1. Review all AI suggestions before implementation
2. Test thoroughly after applying changes
3. Consider security implications
4. Monitor performance after optimizations
5. Update documentation as needed

## 📝 Next Steps
1. Implement high-confidence suggestions first
2. Review and test each change individually
3. Consider team code review for AI suggestions
4. Monitor application performance
5. Update tests to reflect changes

---
*Generated by AI-Enhanced API Code Generator*
`;
  }

  /**
   * Generate AI summary
   */
  generateAISummary(aiInsights) {
    const totalFiles = aiInsights.suggestions.length;
    const avgConfidence = this.calculateAverageConfidence(aiInsights);
    const securityIssues = aiInsights.security.length;
    
    return {
      totalFilesAnalyzed: totalFiles,
      averageConfidence: avgConfidence,
      securityIssuesFound: securityIssues,
      optimizationOpportunities: aiInsights.optimizations.length,
      qualityScore: this.calculateQualityScore(aiInsights.suggestions[0], aiInsights.security[0], aiInsights.optimizations[0])
    };
  }

  // Helper methods
  calculateQualityScore(suggestions, errorAnalysis, optimizations) {
    let score = 7; // Base score
    
    if (suggestions && suggestions.confidence > 0.8) score += 1;
    if (errorAnalysis && errorAnalysis.errors && errorAnalysis.errors.length === 0) score += 1;
    if (optimizations && optimizations.confidence > 0.8) score += 1;
    
    return Math.min(score, 10);
  }

  calculateAverageConfidence(aiInsights) {
    const confidences = [
      ...aiInsights.suggestions.map(s => s.confidence),
      ...aiInsights.optimizations.map(o => o.confidence)
    ];
    
    if (confidences.length === 0) return 0;
    return (confidences.reduce((sum, c) => sum + c, 0) / confidences.length).toFixed(1);
  }

  getOptimizationLevel(confidence) {
    if (confidence > 0.8) return 'High';
    if (confidence > 0.6) return 'Medium';
    return 'Low';
  }

  extractKeyImprovements(suggestions, optimizations) {
    const improvements = [];
    
    if (suggestions.suggestions) {
      improvements.push('- Code quality enhancements suggested');
    }
    
    if (optimizations.recommendations) {
      improvements.push('- Performance optimizations identified');
    }
    
    return improvements.join('\n');
  }

  extractKeySuggestions(suggestionsText) {
    // Extract key points from AI suggestions
    const lines = suggestionsText.split('\n');
    return lines
      .filter(line => line.trim().startsWith('-') || line.trim().startsWith('•'))
      .slice(0, 3) // Take first 3 suggestions
      .map(line => line.replace(/^[-•]\s*/, '').trim());
  }
}

module.exports = new AIEnhancedGenerator(); 