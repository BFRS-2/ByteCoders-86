const { generateNodeCode } = require('./nodeGenerator');
const { generateJavaCode } = require('./javaGenerator');
const { generatePhpCode } = require('./phpGenerator');
const { generateGoCode } = require('./goGenerator');

/**
 * Generate integration code for the specified language
 * @param {Object} parsedData - Parsed API data
 * @param {string} language - Target programming language
 * @param {string} fileName - Original file name
 * @returns {Object} Generated code files
 */
async function generateCode(parsedData, language, fileName) {
  try {
    const { baseUrl, authMethod, endpoints, title, version, description } = parsedData;
    
    // Generate code based on language
    let generatedCode = {};
    
    switch (language.toLowerCase()) {
      case 'node.js':
      case 'nodejs':
      case 'javascript':
        generatedCode = await generateNodeCode(parsedData, fileName);
        break;
        
      case 'java':
        generatedCode = await generateJavaCode(parsedData, fileName);
        break;
        
      case 'php':
        generatedCode = await generatePhpCode(parsedData, fileName);
        break;
        
      case 'go':
        generatedCode = await generateGoCode(parsedData, fileName);
        break;
        
      default:
        throw new Error(`Unsupported language: ${language}`);
    }
    
    // Add documentation
    generatedCode['docs/README.md'] = generateReadme(parsedData, language);
    generatedCode['docs/API_SUMMARY.md'] = generateApiSummary(parsedData);
    generatedCode['docs/USAGE_GUIDE.md'] = generateUsageGuide(parsedData, language);
    
    return generatedCode;
    
  } catch (error) {
    throw new Error(`Failed to generate code: ${error.message}`);
  }
}

/**
 * Generate README documentation
 */
function generateReadme(parsedData, language) {
  const { title, version, description, endpoints, baseUrl, authMethod } = parsedData;
  
  return `# ${title} - ${language.toUpperCase()} Integration

## Overview
This is an auto-generated integration client for the ${title} API.

**Version:** ${version}
**Base URL:** ${baseUrl || 'Not specified'}
**Authentication:** ${authMethod.type === 'none' ? 'None' : authMethod.type.toUpperCase()}

## Description
${description || 'No description available'}

## Features
- ✅ Production-ready integration code
- ✅ Comprehensive error handling
- ✅ Authentication support (${authMethod.type})
- ✅ Type-safe request/response handling
- ✅ Auto-generated test cases
- ✅ Clean, modular architecture

## Generated Endpoints
Total: ${endpoints.length} endpoints

${endpoints.map(endpoint => 
  `- **${endpoint.method}** \`${endpoint.path}\` - ${endpoint.summary || endpoint.description || 'No description'}`
).join('\n')}

## Quick Start
1. Install dependencies (see language-specific instructions below)
2. Configure authentication credentials
3. Import and use the generated client

## File Structure
\`\`\`
src/           # Main integration code
tests/         # Auto-generated test cases
docs/          # Documentation
\`\`\`

## Authentication
${generateAuthDocs(authMethod)}

## Support
This code was generated by the API Code Generator tool.
For issues or questions, please refer to the original API documentation.
`;
}

/**
 * Generate API summary documentation
 */
function generateApiSummary(parsedData) {
  const { endpoints, baseUrl, authMethod } = parsedData;
  
  return `# API Summary

## Base Information
- **Base URL:** ${baseUrl || 'Not specified'}
- **Authentication:** ${authMethod.type === 'none' ? 'None' : authMethod.type.toUpperCase()}
- **Total Endpoints:** ${endpoints.length}

## Authentication Details
${generateAuthDocs(authMethod)}

## Endpoints Breakdown

${endpoints.map(endpoint => {
  const params = endpoint.parameters.length > 0 
    ? `\n  - Parameters: ${endpoint.parameters.map(p => `${p.name} (${p.in})`).join(', ')}`
    : '';
  
  return `### ${endpoint.method} ${endpoint.path}
- **Operation ID:** ${endpoint.operationId}
- **Summary:** ${endpoint.summary || 'No summary'}
- **Description:** ${endpoint.description || 'No description'}${params}
- **Tags:** ${endpoint.tags.join(', ') || 'None'}`;
}).join('\n\n')}

## Response Codes
Common response codes found in the API:
${extractCommonResponseCodes(endpoints)}

## Data Models
${generateDataModelsSummary(endpoints)}
`;
}

/**
 * Generate usage guide
 */
function generateUsageGuide(parsedData, language) {
  const { authMethod, endpoints } = parsedData;
  
  return `# Usage Guide - ${language.toUpperCase()}

## Installation
${getInstallationInstructions(language)}

## Configuration
${getConfigurationInstructions(language, authMethod)}

## Basic Usage
${getBasicUsageExamples(language, endpoints)}

## Error Handling
${getErrorHandlingExamples(language)}

## Testing
${getTestingInstructions(language)}

## Best Practices
1. Always handle errors appropriately
2. Use environment variables for sensitive data
3. Implement proper logging
4. Add request/response validation
5. Use connection pooling for production
6. Implement retry logic for transient failures

## Troubleshooting
- Check authentication credentials
- Verify base URL configuration
- Ensure proper content-type headers
- Review error logs for detailed information
`;
}

/**
 * Generate authentication documentation
 */
function generateAuthDocs(authMethod) {
  switch (authMethod.type) {
    case 'bearer':
      return `**Bearer Token Authentication**
- Header: \`Authorization: Bearer <your-token>\`
- Description: ${authMethod.description || 'Bearer token authentication'}`;
      
    case 'apiKey':
      return `**API Key Authentication**
- Header: \`${authMethod.name}: <your-api-key>\`
- Location: ${authMethod.in}
- Description: ${authMethod.description || 'API key authentication'}`;
      
    case 'basic':
      return `**Basic Authentication**
- Header: \`Authorization: Basic <base64-encoded-credentials>\`
- Description: ${authMethod.description || 'Basic authentication'}`;
      
    case 'oauth2':
      return `**OAuth 2.0 Authentication**
- Header: \`Authorization: Bearer <access-token>\`
- Description: ${authMethod.description || 'OAuth 2.0 authentication'}`;
      
    default:
      return '**No Authentication Required**';
  }
}

/**
 * Extract common response codes
 */
function extractCommonResponseCodes(endpoints) {
  const codes = new Set();
  
  endpoints.forEach(endpoint => {
    Object.keys(endpoint.responses).forEach(code => {
      codes.add(code);
    });
  });
  
  const commonCodes = Array.from(codes).sort();
  
  return commonCodes.map(code => {
    const descriptions = [];
    endpoints.forEach(endpoint => {
      if (endpoint.responses[code]) {
        descriptions.push(endpoint.responses[code].description);
      }
    });
    
    return `- **${code}**: ${descriptions[0] || 'Standard response'}`;
  }).join('\n');
}

/**
 * Generate data models summary
 */
function generateDataModelsSummary(endpoints) {
  const models = new Set();
  
  endpoints.forEach(endpoint => {
    if (endpoint.requestBody?.schema?.properties) {
      Object.keys(endpoint.requestBody.schema.properties).forEach(prop => {
        models.add(prop);
      });
    }
    
    Object.values(endpoint.responses).forEach(response => {
      if (response.schema?.properties) {
        Object.keys(response.schema.properties).forEach(prop => {
          models.add(prop);
        });
      }
    });
  });
  
  if (models.size === 0) {
    return 'No specific data models identified.';
  }
  
  return Array.from(models).map(model => `- ${model}`).join('\n');
}

/**
 * Get installation instructions for language
 */
function getInstallationInstructions(language) {
  switch (language.toLowerCase()) {
    case 'node.js':
    case 'nodejs':
    case 'javascript':
      return `\`\`\`bash
npm install
# or
yarn install
\`\`\``;
      
    case 'java':
      return `\`\`\`xml
<!-- Add to pom.xml -->
<dependency>
    <groupId>com.squareup.okhttp3</groupId>
    <artifactId>okhttp</artifactId>
    <version>4.9.3</version>
</dependency>
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.13.0</version>
</dependency>
\`\`\``;
      
    case 'php':
      return `\`\`\`bash
composer install
\`\`\``;
      
    case 'go':
      return `\`\`\`bash
go mod init api-integration
go mod tidy
\`\`\``;
      
    default:
      return 'See language-specific documentation for installation instructions.';
  }
}

/**
 * Get configuration instructions
 */
function getConfigurationInstructions(language, authMethod) {
  const authConfig = authMethod.type === 'none' 
    ? 'No authentication required.'
    : `Configure your ${authMethod.type} credentials in environment variables or configuration files.`;
  
  return `${authConfig}

See the generated configuration files for language-specific setup.`;
}

/**
 * Get basic usage examples
 */
function getBasicUsageExamples(language, endpoints) {
  if (endpoints.length === 0) {
    return 'No endpoints available for examples.';
  }
  
  const exampleEndpoint = endpoints[0];
  
  switch (language.toLowerCase()) {
    case 'node.js':
    case 'nodejs':
    case 'javascript':
      return `\`\`\`javascript
const ApiClient = require('./src/ApiClient');

const client = new ApiClient({
  baseUrl: '${exampleEndpoint.fullUrl.split(exampleEndpoint.path)[0]}',
  apiKey: process.env.API_KEY
});

// Example: ${exampleEndpoint.method} ${exampleEndpoint.path}
const result = await client.${exampleEndpoint.operationId}();
console.log(result);
\`\`\``;
      
    case 'java':
      return `\`\`\`java
import com.example.ApiClient;

ApiClient client = new ApiClient.Builder()
    .baseUrl("${exampleEndpoint.fullUrl.split(exampleEndpoint.path)[0]}")
    .apiKey(System.getenv("API_KEY"))
    .build();

// Example: ${exampleEndpoint.method} ${exampleEndpoint.path}
ApiResponse result = client.${exampleEndpoint.operationId}();
System.out.println(result);
\`\`\``;
      
    case 'php':
      return `\`\`\`php
require_once 'src/ApiClient.php';

$client = new ApiClient([
    'baseUrl' => '${exampleEndpoint.fullUrl.split(exampleEndpoint.path)[0]}',
    'apiKey' => $_ENV['API_KEY']
]);

// Example: ${exampleEndpoint.method} ${exampleEndpoint.path}
$result = $client->${exampleEndpoint.operationId}();
echo $result;
\`\`\``;
      
    case 'go':
      return `\`\`\`go
package main

import "api-integration/src"

client := src.NewApiClient(src.Config{
    BaseURL: "${exampleEndpoint.fullUrl.split(exampleEndpoint.path)[0]}",
    APIKey:  os.Getenv("API_KEY"),
})

// Example: ${exampleEndpoint.method} ${exampleEndpoint.path}
result, err := client.${exampleEndpoint.operationId}()
if err != nil {
    log.Fatal(err)
}
fmt.Println(result)
\`\`\``;
      
    default:
      return 'See the generated source code for usage examples.';
  }
}

/**
 * Get error handling examples
 */
function getErrorHandlingExamples(language) {
  switch (language.toLowerCase()) {
    case 'node.js':
    case 'nodejs':
    case 'javascript':
      return `\`\`\`javascript
try {
  const result = await client.someMethod();
} catch (error) {
  if (error.status === 401) {
    console.error('Authentication failed');
  } else if (error.status === 404) {
    console.error('Resource not found');
  } else {
    console.error('API Error:', error.message);
  }
}
\`\`\``;
      
    case 'java':
      return `\`\`\`java
try {
    ApiResponse result = client.someMethod();
} catch (ApiException e) {
    if (e.getStatusCode() == 401) {
        System.err.println("Authentication failed");
    } else if (e.getStatusCode() == 404) {
        System.err.println("Resource not found");
    } else {
        System.err.println("API Error: " + e.getMessage());
    }
}
\`\`\``;
      
    case 'php':
      return `\`\`\`php
try {
    $result = $client->someMethod();
} catch (ApiException $e) {
    if ($e->getStatusCode() === 401) {
        error_log('Authentication failed');
    } elseif ($e->getStatusCode() === 404) {
        error_log('Resource not found');
    } else {
        error_log('API Error: ' . $e->getMessage());
    }
}
\`\`\``;
      
    case 'go':
      return `\`\`\`go
result, err := client.SomeMethod()
if err != nil {
    if strings.Contains(err.Error(), "401") {
        log.Fatal("Authentication failed")
    } else if strings.Contains(err.Error(), "404") {
        log.Fatal("Resource not found")
    } else {
        log.Fatal("API Error:", err)
    }
}
\`\`\``;
      
    default:
      return 'See the generated source code for error handling examples.';
  }
}

/**
 * Get testing instructions
 */
function getTestingInstructions(language) {
  switch (language.toLowerCase()) {
    case 'node.js':
    case 'nodejs':
    case 'javascript':
      return `\`\`\`bash
npm test
# or
yarn test
\`\`\``;
      
    case 'java':
      return `\`\`\`bash
mvn test
# or
./gradlew test
\`\`\``;
      
    case 'php':
      return `\`\`\`bash
./vendor/bin/phpunit tests/
\`\`\``;
      
    case 'go':
      return `\`\`\`bash
go test ./tests/...
\`\`\``;
      
    default:
      return 'Run the appropriate test command for your language.';
  }
}

module.exports = { generateCode }; 